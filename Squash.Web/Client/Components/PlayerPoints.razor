@inject HttpClient Http
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time 
@using Squash.Web.Client.ChartJS

    From: <input id="txtDate" type="date" @bind-value="From" /> To: <input id="txtDate" type="date" @bind-value="To" />
    <a class="button" @onclick="@UpdateChart">Show</a>
    <ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

@code {
    [Parameter]
    public int SelectedPlayer { get; set; }

    public DateTime? From { get; set; }

    public DateTime? To { get; set; }

    private IEnumerable<Squash.Shared.Data.Dto.PlayerWithPointsDto> players;

    private LineConfig _lineConfig;
    private ChartJsLineChart _lineChartJs;

    private LineDataset<TimeTuple<double>> _pointsSet;

    private readonly Random _rnd = new Random();

    protected override async Task OnInitializedAsync()
    {
        Console.Write("on init");

        From = new DateTime(2020, 6, 1);

        await InitializeChart();
    }

    private async Task InitializeChart()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Points"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Series,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY",
                                DisplayFormats = Squash.Web.Client.ChartJS.TimeDisplayFormats.Squash
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>
        {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                AutoSkip=true
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        await GetPlayerStatistics(SelectedPlayer);

        foreach (var player in players)
        {
            _pointsSet = new LineDataset<TimeTuple<double>>
            {
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderColor = ColorUtil.RandomColorString(),
                Label = player.Name,
                Fill = false,
                BorderWidth = 2,
                PointRadius = 3,
                PointBorderWidth = 1,
                SteppedLine = SteppedLine.False,
                LineTension = 0
            };

            _pointsSet.AddRange(player.Points.Select(p =>
            {
                return new TimeTuple<double>(new Moment(p.Date), p.Number);
            }));

            _lineConfig.Data.Datasets.Add(_pointsSet);
        }
    }

    private async Task UpdateChart()
    {
        await GetPlayerStatistics(SelectedPlayer);

        _lineConfig.Data.Datasets.Clear();
        _pointsSet.RemoveAll(a => true);

        foreach (var player in players)
        {
            Console.WriteLine($"{player.Name}: {player.Points.Count()}");
            _pointsSet = new LineDataset<TimeTuple<double>>
            {
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderColor = ColorUtil.RandomColorString(),
                Label = player.Name,
                Fill = false,
                BorderWidth = 2,
                PointRadius = 3,
                PointBorderWidth = 1,
                SteppedLine = SteppedLine.False,
                LineTension = 0
            };

            _pointsSet.AddRange(player.Points.Select(p =>
            {
                return new TimeTuple<double>(new Moment(p.Date), p.Number);
            }));
            _lineConfig.Data.Datasets.Add(_pointsSet);
        }

        await _lineChartJs.Update();
    }

    private async Task GetPlayerStatistics(int playerId)
    {
        var query = "";
        if (From.HasValue)
        {
            query += $"&From={From.Value.ToShortDateString()}";
        }
        if (To.HasValue)
        {
            query += $"&To={To.Value.ToShortDateString()}";
        }
        players = await Http.GetFromJsonAsync<IEnumerable<Squash.Shared.Data.Dto.PlayerWithPointsDto>>($"Points?onlyactive=true{query}");
    }
}
